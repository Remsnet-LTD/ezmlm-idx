# $Id$

fatal() {
  for line in "$@"; do
    ${ECHO} "$line" >&2
  done
  exit 100;
}

fixup_bin() {
  for file in bouncer confirmer digest/bouncer editor manager moderator owner
  do
    if [ -e "$DIR"/$file ]; then
      sed -e "s|$CONF_BIN/|$EZBIN/|" "$DIR"/$file >"$DIR"/${file}.tmp
      ${MV} "$DIR"/${file}.tmp "$DIR"/$file
    fi
  done
}

parse_reply_to() {
  sed -e "/^Reply-To: /!d; s/^.*: *$LOC-//; s/@$HOST$//" "$QQHDR"
}

grephdr() {
  # Search for the header line, and produce an error if it didn't match.
  ${GREP} -i "^$*$" "$QQHDR" >/dev/null 2>&1 || \
  {
    ${ECHO} "Header is missing or wrong $1 line:";
    ${GREP} -i "^$1" "$QQHDR"
    BUG="${BUG} headers"
    prompt "..............: "
  }
  # Remove any found lines from the header file
  ${GREP} -iv "^$1" "$QQHDR" >"${TMP}hdr"
  ${MV} -f "${TMP}hdr" "$QQHDR"
}

grepbody() {
  ${GREP} "^$*$" "$QQBODY" >/dev/null 2>&1 || \
  {
    ${ECHO} "Body is missing or wrong $1 line:";
    ${GREP} -i "^$1" "$QQBODY"
    BUG="${BUG} body"
    prompt "..............: "
  }
}

grepbodynot() {
  ${GREP} "^$*" "$QQBODY" >/dev/null 2>&1 && \
  {
    ${ECHO} "Body is contains extraneous $1 line:";
    ${GREP} -i "^$1" "$QQBODY"
    BUG="${BUG} body"
    prompt "..............: "
  }
}

grephdr_std() {
  grephdr message-id: "<[0123456789]*\\.[0123456789]*\\.ezmlm@${HOST}>"
  grephdr delivered-to: "responder for ${LOC}@${HOST}"
  grephdr mime-version: 1.0
}

grephdr_list() {
  grephdr mailing-list: "contact ${LOC}-help@${HOST}; run by ezmlm"
  grephdr list-help: "<mailto:${LOC}-help@${HOST}>"
  grephdr list-post: "<mailto:${LOC}@${HOST}>"
  grephdr list-subscribe: "<mailto:${LOC}-subscribe@${HOST}>"
  if [ -n "$*" ]; then
    grephdr list-unsubscribe: "<mailto:${LOC}-unsubscribe@${HOST}>"
  fi
}

grephdr_manage() {
  grephdr_std
  grephdr_list
  grephdr date: '..* ... .... ..:..:.. [-+]....'
  grephdr from: "${LOC}-help@${HOST}"
  grephdr to: "test@example.org"
  grephdr content-type: "text/plain; charset=.*"
}

grephdr_empty() {
  # Use this after all other grephdr checks to ensure nothing else was output
  test -s "$QQHDR" && \
  {
    ${ECHO} "Headers contained extra lines:"
    ${CAT} "$QQHDR"
    BUG="${BUG} headers"
  }
}

###############################
# message generating function #
###############################
make_body()
{
  ${ECHO} "This is a simple message body"
  ${ECHO} "--bound123ary"
  ${ECHO} "Content-type: Text/pLAIn"
  ${ECHO}
  ${ECHO} "plain text"
  ${ECHO} "--bound123ary"
  ${ECHO} "Content-type: texT/Html"
  ${ECHO}
  ${ECHO} "html text"
  ${ECHO} "--bound123ary--"
  ${ECHO}
  ${ECHO} "junk after boundary"
  return 0
}

qqclean()
{
  ${RM} -f "$QQBODY" "$QQENV" "$QQHDR" "$QQMSG" "$QQMSG".*
}

make_message()
{
  if [ ! -z "$MAKE_HEADER" ]; then
      ${ECHO} "$MAKE_HEADER"
  fi
  ${ECHO} "ReCEIved: #LAST#"
  ${ECHO} "ReCeIved: #PENULTIMATE#"
  ${ECHO} "retuRN-RECeipt-to: nobody"
  ${ECHO} "To: $TO"
  ${ECHO} "CC: "
  ${ECHO} " $CC"
  ${ECHO} "FROM: $FROM"
  if [ ! -z "$CONTENT" ]; then
	${ECHO} "MIME-Version: 1.0"
	${ECHO} "Content-type: $CONTENT;"
	${ECHO} " boundary=bound123ary${AFTERBOUND}"
  fi
  if [ ! -z "$SUBJECT" ]; then
	${ECHO} "Subject: $SUBJECT"
  fi
  ${ECHO}
  make_body
  return 0
}

#########################
# Tests for file status #
#########################
exists() {
  for file in "$@"; do
    ${TEST} -e "$file" || return 1
  done
  return 0
}

msgexists() {
  ${TEST} -s "$QQMSG" -a -s "${QQENV}"
}

#############################
# Program execution helpers #
#############################

# Run the program, and redirect stderr to $ERR.
# All programs get run this way.
run() {
  program="$1"
  shift
  ${EZBIN}/$program "$@" 2> "$ERR"
}

# Run the program, redirecting all output to $ERR and input from $TMP.
file_run() {
  ${ECHO} -n >> "$TMP"
  run "$@" < "$TMP" > "$ERR" 2>&1
}

# Make a message and then run the program.
make_message_run() {
  make_message > "$TMP"
  file_run "$@"
}

# Run ezmlm-dispatch
dispatch() {
  fixup_bin
  if [ -z "$1" ]; then
    unset DEFAULT
  else
    DEFAULT="$1"
  fi
  export DEFAULT
  make_message_run ezmlm-dispatch "$DIR" .
}

# Quiet grep, only test for true/false
grepq() {
  ${GREP} "$@" >/dev/null 2>&1
}

issub() {
  run ezmlm-list "$DIR" $1 | grepq "^$2$"
}
